// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  progress      Progress[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Enhanced Progress model with better relationships
model Progress {
  id          String    @id @default(cuid())
  userId      String
  problemId   String    // This will reference the actual problem
  company     String
  difficulty  String
  title       String
  status      String    // "not_started", "in_progress", "completed"
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

// New Company model for sync functionality
model Company {
  id        String    @id @default(cuid())
  name      String    @unique
  isActive  Boolean   @default(true)
  problems  Problem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("companies")
}

// New Problem model for structured data storage
model Problem {
  id             String      @id @default(cuid())
  companyId      String
  title          String
  difficulty     Difficulty
  frequency      Float
  acceptanceRate Float
  link           String
  topics         String
  timeframe      Timeframe
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, title, timeframe])
  @@map("problems")
}

// New SyncLog model for tracking synchronization
model SyncLog {
  id                  String     @id @default(cuid())
  companiesProcessed  Int        @default(0)
  problemsAdded       Int        @default(0)
  problemsUpdated     Int        @default(0)
  problemsSkipped     Int        @default(0)
  errorsCount         Int        @default(0)
  status              SyncStatus @default(RUNNING)
  details             Json?      // Additional metadata like errors, timing, etc.
  createdAt           DateTime   @default(now())
  completedAt         DateTime?

  @@map("sync_logs")
}

// Enums for better type safety
enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Timeframe {
  THIRTY_DAYS
  THREE_MONTHS
  SIX_MONTHS
  MORE_THAN_SIX_MONTHS
  ALL
}

enum SyncStatus {
  RUNNING
  SUCCESS
  FAILED
  COMPLETED_WITH_ERRORS
}
