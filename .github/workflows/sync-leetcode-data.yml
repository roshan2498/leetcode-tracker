name: Sync LeetCode Data

on:
  # Run every day at 6 AM UTC to check for updates
  schedule:
    - cron: '0 6 * * *'
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'Force complete data sync'
        required: false
        default: 'false'
        type: boolean

  # Monitor the external repository for changes (webhook-based)
  repository_dispatch:
    types: [leetcode-data-updated]

env:
  LEETCODE_REPO_URL: "https://github.com/krishnadey30/LeetCode-Questions-CompanyWise"

jobs:
  sync-data:
    runs-on: ubuntu-latest
    name: Sync LeetCode Data to Repository
    
    steps:
      - name: Checkout Current Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci
        
      - name: Clone LeetCode Source Repository
        run: |
          git clone ${{ env.LEETCODE_REPO_URL }} leetcode-source
          cd leetcode-source
          echo "LATEST_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "Latest source commit: $(git rev-parse HEAD)"
          
      - name: Check for Updates
        id: check
        run: |
          # Get last sync commit
          LAST_SYNC_COMMIT=$(cat .last-sync-commit 2>/dev/null || echo "")
          
          echo "Last sync commit: $LAST_SYNC_COMMIT"
          echo "Latest commit: $LATEST_COMMIT"
          
          if [ "$LAST_SYNC_COMMIT" != "$LATEST_COMMIT" ] || [ "${{ github.event.inputs.force_sync }}" = "true" ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "Updates detected or force sync requested"
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "No updates needed"
          fi
          
      - name: Validate Source Data
        if: steps.check.outputs.has_updates == 'true'
        run: |
          echo "Validating source data structure..."
          node scripts/validate-data.js leetcode-source
          
      - name: Sync Data Files
        if: steps.check.outputs.has_updates == 'true'
        run: |
          echo "Syncing data files..."
          
          # Backup current data
          if [ -d "public/data" ]; then
            cp -r public/data public/data.backup
          fi
          
          # Copy new data
          rm -rf public/data
          cp -r leetcode-source public/data
          
          # Generate companies list
          node scripts/generate-companies-list.js public/data
          
          # Update last sync commit
          echo "$LATEST_COMMIT" > .last-sync-commit
          
      - name: Check for Changes
        if: steps.check.outputs.has_updates == 'true'
        id: changes
        run: |
          git add -A
          if git diff --cached --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No file changes detected"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "File changes detected"
          fi
          
      - name: Commit and Push Changes
        if: steps.check.outputs.has_updates == 'true' && steps.changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create commit message with statistics
          COMPANIES_COUNT=$(find public/data -name "*.csv" -path "*/1. Thirty Days.csv" | wc -l)
          
          git commit -m "🔄 Auto-sync LeetCode data
          
          - Source commit: $LATEST_COMMIT
          - Companies: $COMPANIES_COUNT
          - Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - Triggered by: ${{ github.event_name }}"
          
          git push
          
      - name: Create Summary
        if: steps.check.outputs.has_updates == 'true'
        run: |
          echo "## 🔄 LeetCode Data Sync Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Source Commit**: \`$LATEST_COMMIT\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "public/data" ]; then
            COMPANIES_COUNT=$(find public/data -name "*.csv" -path "*/1. Thirty Days.csv" | wc -l)
            echo "- **Companies Processed**: $COMPANIES_COUNT" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.changes.outputs.has_changes }}" = "true" ]; then
            echo "- **Files Updated**: ✅ Yes" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Files Updated**: ❌ No changes" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Report No Updates
        if: steps.check.outputs.has_updates == 'false'
        run: |
          echo "## 📋 LeetCode Data Sync Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Up to date" >> $GITHUB_STEP_SUMMARY
          echo "- **Message**: No updates available" >> $GITHUB_STEP_SUMMARY
          echo "- **Last Sync**: \`$(cat .last-sync-commit 2>/dev/null || echo 'Never')\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          
      - name: Cleanup
        if: always()
        run: |
          rm -rf leetcode-source
          rm -rf public/data.backup 2>/dev/null || true
